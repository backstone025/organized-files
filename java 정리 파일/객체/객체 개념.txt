객체

현실세계
- 객체마다 고유한 속성, 상태, 행동을 가짐
- 다른 객체들과 정보를 주고받는 등 상호작용하면서 존재

프로그램

특성 1 : 캡슐화(encapsulation)
	뜻 : 객체를 캡슐로 써서 내부를 볼 수 없게 하는 것
		->객체의 본질적 특성
		->외부의 접근으로부터 객체 내부를 보호
		->복잡성을 가려 손쉬운 사용을 유도하고 중요한 기능에 집중(단순하게)

	자바에서 캡슐화 -> 클래스(메소드와 필드는 클래스 내에 구현) : 모양만 결정	(메소드 = 함수, 필드 = 변수)
			클래스로 묶은 후 멤버를 사용(메소드 = 멤베펑션, 필드 = 멤버뷀류)
			인스턴트 : 실제로 있음(메모리에)
			안과 밖이 구별되니, 전용 멤버(private member)(내부만 쓸 수 있음)통해 접근을 통제할 수 있음 / 클래스 밖은 쓸 수 없음
					<->public(모두 쓸 수 있다.)를 통해 접근허용 가능

특성 2 : 상속(inheritance)
	뜻: 상위 개체의 속성이 하위 개체에 대물림됨
		= 하위 객체는 상위 개체의 속성을 보유
	+상소되었는지 표시할 때에는 누구로 부터 상속되었는지 화살표를 표시(= 상위 개체를 향해 화살표를 가르킴)

	자바에서 상속 -> 확장(extends)(클래스 뒤에 extends를 붇이면 됨)
			자식 클래스가 부모의 클래스의 속성을 물려받고, 기능 확장
			부모 클래스: 수퍼 클래스(super class)
			하위 클래스: 서브 클래스(sub class). 수퍼 클래스를 재사용하고 새로운 특성 추가 가능
			속성을 많이 하면 복잡하기에 잘못될 수 있다.

			+인터페이스 : 일종의 설계도(클래스와 비슷하지만, 가이드 라인 성향일 거진다.)

특성 3 : 다형성(polymorphism)
	뜻: 동일한 속성이 다양한 형태로 발현되는 현상

	자바에서 다형성 -> 같은 이름의 메소드나 클래스에 따라 다를게 동작하도록 구현
	메소드 오버로딩: 같은 이름을 다르게 쓰는 것 (이름을 계속 쓰는데, 다르게 쓰는 것)
	메소의 오버라이딩: 상위클래스의 메소드를 하위 클래스마다 다르게 구현(이름은 같지만, 하위 클래스에서 내용을 바꾸는 것)


객체지향언어의 복적
- 소프트 웨어의 생산성 향상 -> 소프트웨어의 생명 주기가 단축(업데이트 주기가 짧아짐) -> 덩치가 커지면 고치는데 어렵다.
	객체지향언어는 소프트웨어 재사용할 수 있도록 도와줌.

- 현실세계에 대한 쉬운 모델링

절차형 프로그래밍(c, c++)
- 자업 순서 표현
- 기능에 초점을 맞춘 것
- 작업을 함수로 작성한 함수들의 집합

객체 지향 프로그래밍(java, python)
- 객체를 정의하고, 객체간의 상호작용으로 표현
- 클래스 혹은 객체들의 집합으로 프로그램 작성

클래스 : 객체를 찍어내기 위한 틀이다.(객체의 속성, 상태, 행동포함)
객체 : 클래스의 모양 그대로 찍어낸 실체(클래스의 결과물)
- 프로그램 실행 중에 생성되는 실체
- 메모리공간을 가지는 실체

객체 생성: 반드시 new 키워드를 이용하여 생성(실제 인스턴트 만들때, 즉 메모리 할당할 때)(new는 객체의 생성자 호출)
객체 생성 과정
1. 객체에 대한 (참조 변수)레퍼런스 변수 선언
2. 객체 생성
	- 클래스 타입 크기의 메모리 할당
	- 객체 내 생성자 코드 실행
객체의 멤버 접근
- (객체 레퍼런스변수 이름).(멤버)		쉽다 ' . '쓰면 됨
